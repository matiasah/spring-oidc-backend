package oidc.management.util;

import java.util.Arrays;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.core.AuthorizationGrantType;
import org.springframework.security.oauth2.core.ClientAuthenticationMethod;
import org.springframework.security.oauth2.core.oidc.OidcScopes;
import org.springframework.security.oauth2.server.authorization.config.ClientSettings;
import org.springframework.security.oauth2.server.authorization.config.TokenSettings;
import lombok.extern.java.Log;
import oidc.management.model.Authority;
import oidc.management.model.Scope;
import oidc.management.model.ServiceAccount;
import oidc.management.properties.DefaultServiceAccountProperties;
import oidc.management.repository.ServiceAccountRepository;

/**
 * Creates a default service account.
 * 
 * @author Matias Hermosilla
 * @since 20-02-2022
 * @see DefaultServiceAccountProperties
 */
@Log
@ConditionalOnProperty(prefix = "oidc.management.service-account", name = "enabled", havingValue = "true")
@ConditionalOnBean(DefaultServiceAccountProperties.class)
public class DefaultServiceAccountSeeder {

    @Autowired
    private DefaultServiceAccountProperties serviceAccountProperties;

    @Autowired
    private ServiceAccountRepository serviceAccountRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    /**
     * Creates a default service account.
     */
    @PostConstruct
    public void seed() {

        // Get client Id of the service account
        String clientId = serviceAccountProperties.getClientId();

        // Find if the service account already exists
        Optional<ServiceAccount> optServiceAccount = serviceAccountRepository.findByClientId(clientId);

        // If the service account does not exist, create it
        if (!optServiceAccount.isPresent()) {

            // Create the service account object
            ServiceAccount serviceAccount = ServiceAccount.builder()
                    .clientId(serviceAccountProperties.getClientId())
                    .clientSecret(this.passwordEncoder.encode(serviceAccountProperties.getClientSecret()))
                    .clientSecretExpiresAt(null)
                    .clientName("Default Service Account")
                    .clientDescription("Generated by first initialization")
                    .clientAuthenticationMethods(
                        Arrays.asList(ClientAuthenticationMethod.CLIENT_SECRET_BASIC, ClientAuthenticationMethod.CLIENT_SECRET_POST)
                            .stream()
                            .collect(Collectors.toSet()
                        )
                    )
                    .authorizationGrantTypes(
                        Arrays.asList(AuthorizationGrantType.AUTHORIZATION_CODE, AuthorizationGrantType.REFRESH_TOKEN)
                            .stream()
                            .collect(Collectors.toSet()
                        )
                    )
                    .redirectUris(serviceAccountProperties.getRedirectUris())
                    .scopes(
                        // TODO: Persist scopes
                        Arrays.asList(
                            Scope.builder().name(OidcScopes.OPENID).build()
                        )
                        .stream()
                        .collect(Collectors.toSet())
                    )
                    .clientSettings(
                        ClientSettings.builder()
                            .requireAuthorizationConsent(true)
                            .build()
                    )
                    .tokenSettings(
                        TokenSettings.builder()
                            .build()
                    )
                    .authorities(
                        // TODO: Persist authorities
                        Arrays.asList(Authority.builder().name("ROLE_SERVICE_ACCOUNT").build())
                    )
                    .build();

            // Save the service account
            this.serviceAccountRepository.save(serviceAccount);

            // Log
            log.info("Created a default service account with id \"" + serviceAccount.getClientId() + "\" and password \"" + serviceAccountProperties.getClientSecret() + "\"");

        } else {

            // Warn
            log.warning("The default service account already exists");

        }

    }
    
}
